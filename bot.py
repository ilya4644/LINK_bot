from keyboard import *

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class profile(StatesGroup):
    username = State()
    id = State()
    want = State()
    sex = State()
    name = State()
    age = State()
    inst = State()
    form = State()
    course = State()
    napr = State()
    interests = State()
    photo = State()
    name_ = State()
    age_ = State()
    form_ = State()
    course_ = State()
    napr_ = State()
    interests_ = State()
    photo_ = State()
    man_send = State()
    gl_send = State()
    all_send = State()

'''–•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start'''
@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    if message.from_user.id == 470292800:
        await message.answer(text="–üo—à–µ–ª –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞, —Ä–æ–∑–±–∏–π–Ω–∏–∫")
    if not DataBase().userExist(message.from_user.id):
        await state.update_data(id=message.from_user.id)
        await state.update_data(username=message.from_user.username)
        await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}üëã\n–≠—Ç–æ –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –≤ –£—Ä–§–£',
                             reply_markup=keyboard_start())
    else:
        await message.answer(text="–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ...", reply_markup=keyboard_menu())


@dp.message_handler(lambda message: message.text == '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ãüëÄ' or message.text == '‚ùå' or message.text == '‚úÖ')
async def magic_start(message: types.Message):
    if message.text == '‚úÖ':
        a = DataBase().getUser(message.from_user.id)
        if a[11] == '0':
            await message.answer('–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä–æ–∫\n\n–ù–∞–∂–º–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
        else:
            photo = open(f'{a[7]}', 'rb')
            await bot.send_photo(a[11], photo=photo,
                                 caption=f'–¢–µ–±–µ –æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä–æ–∫...\n{a[1]}, {a[3]}, {inst_[a[4]]}\n{a[15]} - {a[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {a[16]}\n{a[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{a[10]}',
                                 reply_markup=keyboard_simp())
            DataBase().update('likesimp', message.from_user.id, a[11])
            DataBase().update_likeid('0', a[0])
            user1 = DataBase().getUser(message.from_user.id)
            user2 = DataBase().showPeople(user1)
            print(user2)
            if user2 != False:
                DataBase().update_likeid(user2[0], user1[0])
                photo = open(f'{user2[7]}', 'rb')
                await message.answer_photo(photo=photo,
                                           caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}',
                                           reply_markup=keyboard_like())
            else:
                await message.answer(text="–õ—é–¥–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å...")
    else:
        user1 = DataBase().getUser(message.from_user.id)
        user2 = DataBase().showPeople(user1)
        print(user2)
        if user2 != False:
            DataBase().update_likeid(user2[0], user1[0])
            photo = open(f'{user2[7]}', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}',
                                       reply_markup=keyboard_like())
        else:
            await message.answer(text="–õ—é–¥–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å...", reply_markup=keyboard_menu())


@dp.message_handler(lambda message: message.text == '–ú–µ–Ω—éüí§')
async def magic_start(message: types.Message):
    await message.answer(text='–¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é...', reply_markup=keyboard_menu())


@dp.message_handler(lambda message: message.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞üìù')
async def magic_start(message: types.Message):
    if message.from_user.id == 470292800:
        await message.answer(text="–ü–æ—à–µ–ª –Ω–∞—Ö—É–π")
    else:
        user2 = DataBase().getUser(message.from_user.id)
        if user2[12] == 0:
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_red_1())
        else:
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_red_2())


@dp.callback_query_handler(lambda call: call.data == "‚ùå–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É‚ùå" or call.data == "–ü–æ–∫")
async def f(call: types.CallbackQuery):
    if call.data == "‚ùå–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É‚ùå":
        users = (DataBase().not_watch()).split()
        for i in range(len(users)):
            a = DataBase().getUser(int(users[i]))
            if f'{call.from_user.id}' not in a[9]:
                user = DataBase().getUser(call.from_user.id)
                DataBase().updateShown(a, user[0])
                DataBase().update("look", 1, call.from_user.id)
                await call.message.edit_reply_markup(reply_markup=keyboard_red_2())
    elif call.data == "–ü–æ–∫":
        users = (DataBase().not_watch()).split()
        for i in range(len(users)):
            a = DataBase().getUser(int(users[i]))
            if f'{call.from_user.id}' in a[9]:
                user = DataBase().getUser(call.from_user.id)
                DataBase().delete_shown(user[0])
                DataBase().update("look", 0, call.from_user.id)
                await call.message.edit_reply_markup(reply_markup=keyboard_red_1())


@dp.callback_query_handler(lambda call: call.data == "simp")
async def f(call: types.CallbackQuery):
    if call.data == 'simp':
        user = DataBase().getUser(call.from_user.id)
        user2 = DataBase().getUser(int(user[14]))
        print(user[14])
        photo = open(f'{user[7]}', 'rb')
        print(user2)
        await bot.send_photo(user2[0], photo=photo,
                             caption=f'-- –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è --\n\n{user[1]}, {user[3]}, {inst_[user[4]]}\n{user[15]} - {user[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user[16]}\n{user[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user[10]}')
        await call.message.edit_reply_markup(reply_markup=keyboard_fan_0_())

'''–•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"'''
@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå')
async def magic_start(message: types.Message):
    await message.answer(text='–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?', reply_markup=keyboard_liked())


# —Ö–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–∂–±–∞/–±–æ–ª—å—à–µ/–ø–µ—Ä–µ–ø–∏—Ö–æ–Ω"
@dp.callback_query_handler(lambda call: call.data == "–î—Ä—É–∂–±–∞" or call.data == "–ß—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–µ", state="*")
async def type_find(call: types.CallbackQuery, state: FSMContext):
    if call.data == '–î—Ä—É–∂–±–∞':
        await call.message.edit_text(text='–ö—Ç–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω?', reply_markup=keyboard_search_friend())
    elif call.data == '–ß—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–µ':
        await call.message.edit_text(text='–ö—Ç–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω?', reply_markup=keyboard_search_couple())


@dp.callback_query_handler(lambda call: call.data == "boy_friend" or call.data == "girl_friend" or call.data == "all_friend" or call.data == "boy" or call.data == "girl" or call.data == "back", state="*")
async def sex(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'boy_friend':
        await state.update_data(want=1)
        await call.message.edit_text(text='–ö—Ç–æ —Ç—ã?', reply_markup=keyboard_profile_sex())
    elif call.data == 'girl_friend':
        await state.update_data(want=2)
        await call.message.edit_text(text='–ö—Ç–æ —Ç—ã?', reply_markup=keyboard_profile_sex())
    elif call.data == 'all_friend':
        await state.update_data(want=3)
        await call.message.edit_text(text='–ö—Ç–æ —Ç—ã?', reply_markup=keyboard_profile_sex())
    elif call.data == 'boy':
        await state.update_data(want=4)
        await call.message.edit_text(text='–ö—Ç–æ —Ç—ã?', reply_markup=keyboard_profile_sex())
    elif call.data == 'girl':
        await state.update_data(want=5)
        await call.message.edit_text(text='–ö—Ç–æ —Ç—ã?', reply_markup=keyboard_profile_sex())
    else:
        await call.message.edit_text(text='–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?', reply_markup=keyboard_liked())


@dp.callback_query_handler(lambda call: call.data == "man" or call.data == "gl" or call.data == "back_1", state="*")
async def sex(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'man':
        await state.update_data(sex=1)
        await call.message.edit_text(text='–¢–≤–æ—ë –∏–º—è')
        await profile.name.set()
    elif call.data == 'gl':
        await state.update_data(sex=0)
        await call.message.edit_text(text='–¢–≤–æ—ë –∏–º—è')
        await profile.name.set()
    elif call.data == 'back_1':
        await call.message.edit_text(text='–ö—Ç–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω?', reply_markup=keyboard_liked())


@dp.message_handler(state=profile.name, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    try:
        example = str(message.text.title())
        if example != '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå' and example != '/admin' and example != '/start':
            await state.update_data(name=message.text)
            await message.answer(text='–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
            await profile.age.set()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è')


@dp.message_handler(state=profile.age, content_types=types.ContentTypes.TEXT)
async def age(message: types.Message, state: FSMContext):
    try:
        example = int(message.text.title())
        if int(example) <= 45 and int(example) >= 15:
            await state.update_data(age=int(message.text.title()))
            await message.answer(text='–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è', reply_markup=keyboard_form())
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')


@dp.callback_query_handler(lambda call: call.data == "–ë–∞–∫" or call.data == "C–ø–µ—Ü" or call.data == "–ú–∞–≥–∏—Å—Ç", state=profile)
async def inst(call: types.CallbackQuery, state: FSMContext):
    if call.data == '–ë–∞–∫':
        print("hui")
        await state.update_data(form='–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç')
        await call.message.answer(text='–ù–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ?üìò\n1-4')
        await profile.course.set()
    if call.data == '–°–ø–µ—Ü':
        print("hui")
        await state.update_data(form='–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç')
        await call.message.answer(text='–ù–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ?üìò\n1-5')
        await profile.course.set()
    if call.data == '–ú–∞–≥–∏—Å—Ç':
        print("hui")
        await state.update_data(form='–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')
        await call.message.answer(text='–ù–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ?üìò\n1-2')
        await profile.course.set()


@dp.message_handler(state=profile.course, content_types=types.ContentTypes.TEXT)
async def age(message: types.Message, state: FSMContext):
    try:
        example = int(message.text.title())
        form = await state.get_data()
        if form['form'] == '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç' and 1 <= int(example) <= 4:
            await state.update_data(course=int(message.text.title()))
            await message.answer(text='–ì–¥–µ —Ç—É—Ç —Ç–≤–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç?', reply_markup=keyboard_search_inst())
        elif form['form'] == '–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç' and 1 <= int(example) <= 5:
            await state.update_data(course=int(message.text.title()))
            await message.answer(text='–ì–¥–µ —Ç—É—Ç —Ç–≤–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç?', reply_markup=keyboard_search_inst())
        elif form['form'] == '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞' and 1 <= int(example) <= 2:
            await state.update_data(course=int(message.text.title()))
            await message.answer(text='–ì–¥–µ —Ç—É—Ç —Ç–≤–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç?', reply_markup=keyboard_search_inst())
        else:
            await message.answer(
                text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫—É—Ä—Å –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã\n\n(–ù–µ –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)')
    except:
        await message.answer(
            text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫—É—Ä—Å –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã\n\n(–ù–µ –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)')


@dp.callback_query_handler(lambda call: call.data == "1" or call.data == "2" or call.data == "3" or call.data == "4" or call.data == "5" or call.data == "6" or call.data == "7" or call.data == "8" or call.data == "9" or call.data == "10" or call.data == "11" or call.data == "12", state="*")
async def inst(call: types.CallbackQuery, state: FSMContext):
    if call.data == '1':
        await state.update_data(inst=1)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '2':
        await state.update_data(inst=2)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '3':
        await state.update_data(inst=3)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '4':
        await state.update_data(inst=4)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '5':
        await state.update_data(inst=5)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '6':
        await state.update_data(inst=6)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '7':
        await state.update_data(inst=7)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '8':
        await state.update_data(inst=8)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '9':
        await state.update_data(inst=9)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '10':
        await state.update_data(inst=10)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '11':
        await state.update_data(inst=11)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()
    elif call.data == '12':
        await state.update_data(inst=12)
        await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr.set()

@dp.message_handler(state=profile.napr, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    try:
        example = str(message.text)
        if example != '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå' and example != '/admin' and example != '/start':
            await state.update_data(napr=message.text)
            await message.answer(text='–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ')
            await profile.interests.set()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')

@dp.message_handler(state=profile.interests, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    try:
        example = str(message.text)
        if example != '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå' and example != '/admin' and example != '/start':
            await state.update_data(interests=message.text)
            await message.answer(text='–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
            await profile.photo.set()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')


@dp.message_handler(state=profile.photo, content_types=['photo'])
async def name(message: types.Message, state: FSMContext):
    await message.photo[-1].download(f'{message.from_user.id}.jpg')
    await state.update_data(photo=f'{message.from_user.id}.jpg')
    user_profile = await state.get_data()
    photo = open(f'{message.from_user.id}.jpg', 'rb')
    await message.answer_photo(photo=photo, caption=f'{user_profile["name"]}, {user_profile["age"]}, {inst_[user_profile["inst"]]} - {user_profile["course"]} –∫—É—Ä—Å\n{user_profile["interests"]}', reply_markup=keyboard_red())


@dp.callback_query_handler(lambda call: call.data == "redact" or call.data == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state="*")
async def next(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'redact':
        await call.message.answer(text='–ü–µ—Ä–µ—Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É', reply_markup=keyboard_liked())
    elif call.data == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await call.message.edit_reply_markup(reply_markup=keyboard_fan())
        user_profile = await state.get_data()
        user = [user_profile['id'], user_profile['name'], user_profile['sex'], user_profile['age'],
                user_profile['inst'], user_profile['course'], user_profile['interests'], user_profile['photo'],
                user_profile['want'], '', user_profile['username'], '', '0', '0', '', user_profile['form'], user_profile['napr']]
        DataBase().addUser(user)
        await state.finish()
        await call.message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!!!\n–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!\n–ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º!',
                                  reply_markup=keyboard_menu())


'''–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É'''


@dp.callback_query_handler(lambda call: call.data == "all_friend_" or call.data == "redact_profile" or call.data == "." or call.data == "ready_" or call.data == "–ë–∞–∫_" or call.data == "–°–ø–µ—Ü_" or call.data == "–ú–∞–≥–∏—Å—Ç_" or call.data == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å_" or call.data == "name_" or call.data == "age_" or call.data == "sex_" or call.data == "inst_" or call.data == "course_" or call.data == "interests_" or call.data == "photo_" or call.data == "type_" or call.data == "friend_" or call.data == "next_friend_" or call.data == "boy_friend_" or call.data == "girl_friend_" or call.data == "boy_" or call.data == "girl_" or call.data == "form_" or call.data == "napr_" or call.data == "1_" or call.data == "2_" or call.data == "3_" or call.data == "4_" or call.data == "5_" or call.data == "6_" or call.data == "7_" or call.data == "8_" or call.data == "9_" or call.data == "10_" or call.data == "man_" or call.data == "gl_", state="*")
async def redact(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'redact_profile' or call.data == '.':
        await call.message.edit_reply_markup(reply_markup=keyboard_redact())
    elif call.data == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å_' or call.data == 'ready_':
        await call.message.edit_reply_markup(reply_markup=keyboard_fan())
    elif call.data == 'name_':
        await call.message.answer(text='–¢–≤–æ—ë –∏–º—è')
        await profile.name_.set()
    elif call.data == 'age_':
        await call.message.answer(text='–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        await profile.age_.set()
    elif call.data == 'course_':
        await call.message.answer(text='–ù–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ?üìò')
        await profile.course_.set()
    elif call.data == 'interests_':
        await call.message.answer(text='–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ')
        await profile.interests_.set()
    elif call.data == 'form_':
        await call.message.edit_reply_markup(reply_markup=keyboard_form_edit())
    elif call.data == '–ë–∞–∫_':
        DataBase().update('form', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç', call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '–°–ø–µ—Ü_':
        DataBase().update('form', '–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç', call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '–ú–∞–≥–∏—Å—Ç_':
        DataBase().update('form', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞', call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'napr_':
        await call.message.answer(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        await profile.napr_.set()
    elif call.data == 'photo_':
        await call.message.answer(text='–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        await profile.photo_.set()
    elif call.data == 'sex_':
        await call.message.edit_reply_markup(reply_markup=keyboard_profile_sex_redact())
    elif call.data == 'man_':
        DataBase().update('sex', 1, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'gl_':
        DataBase().update('sex', 0, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'inst_':
        await call.message.edit_reply_markup(reply_markup=keyboard_search_inst_redact())
    elif call.data == '1_':
        DataBase().update('institute', 1, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '2_':
        DataBase().update('institute', 2, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '3_':
        DataBase().update('institute', 3, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '4_':
        DataBase().update('institute', 4, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '5_':
        DataBase().update('institute', 5, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '6_':
        DataBase().update('institute', 6, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '7_':
        DataBase().update('institute', 7, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '8_':
        DataBase().update('institute', 8, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '9_':
        DataBase().update('institute', 9, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == '10_':
        DataBase().update('institute', 10, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'type_':
        await call.message.edit_reply_markup(reply_markup=keyboard_liked_redact())
    elif call.data == 'friend_':
        await call.message.edit_reply_markup(reply_markup=keyboard_search_friend_redact())
    elif call.data == 'next_friend_':
        await call.message.edit_reply_markup(reply_markup=keyboard_search_couple_redact())
    elif call.data == 'boy_friend_':
        DataBase().update('want', 1, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'boy_friend_':
        DataBase().update('want', 1, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'girl_friend_':
        DataBase().update('want', 2, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'all_friend_':
        DataBase().update('want', 3, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'boy_':
        DataBase().update('want', 4, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())
    elif call.data == 'girl_':
        DataBase().update('want', 5, call.from_user.id)
        user2 = DataBase().getUser(call.from_user.id)
        # photo = open(f'{call.from_user.id}.jpg', 'rb')
        await call.message.edit_caption(
            caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
            reply_markup=keyboard_redact())


@dp.message_handler(state=profile.name_, content_types=types.ContentTypes.TEXT)
async def name_redact(message: types.Message, state: FSMContext):
    try:
        example = str(message.text)
        if example != '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå' and example != '/admin' and example != '/start':
            DataBase().update('fullname', message.text, message.from_user.id)
            user2 = DataBase().getUser(message.from_user.id)
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_fan())
            await state.finish()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è')


@dp.message_handler(state=profile.age_, content_types=types.ContentTypes.TEXT)
async def name_redact(message: types.Message, state: FSMContext):
    try:
        example = int(message.text.title())
        if int(example) <= 45 and int(example) >= 15:
            DataBase().update('age', int(message.text.title()), message.from_user.id)
            user2 = DataBase().getUser(message.from_user.id)
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_fan())
            await state.finish()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')


@dp.message_handler(state=profile.course_, content_types=types.ContentTypes.TEXT)
async def age(message: types.Message, state: FSMContext):
    try:
        example = int(message.text.title())
        if 1 <= int(example) <= 4:
            DataBase().update('course', int(message.text.title()), message.from_user.id)
            user2 = DataBase().getUser(message.from_user.id)
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_fan())
            await state.finish()
        else:
            await message.answer(
                text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫—É—Ä—Å –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã\n\n(–ù–µ –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)')
    except:
        await message.answer(
            text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫—É—Ä—Å –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã\n\n(–ù–µ –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)')


@dp.message_handler(state=profile.interests_, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    try:
        example = str(message.text)
        if example != '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå' and example != '/admin' and example != '/start':
            DataBase().update('interests', message.text, message.from_user.id)
            user2 = DataBase().getUser(message.from_user.id)
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_fan())
            await state.finish()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')


@dp.message_handler(state=profile.napr_, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    try:
        example = str(message.text)
        if example != '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå' and example != '/admin' and example != '/start':
            DataBase().update('napr', message.text, message.from_user.id)
            user2 = DataBase().getUser(message.from_user.id)
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_fan())
            await state.finish()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')


@dp.message_handler(state=profile.photo_, content_types=['photo'])
async def name(message: types.Message, state: FSMContext):
    try:
        example = str(message.text)
        if example != '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå' and example != '/admin' and example != '/start':
            await message.photo[-1].download(f'{message.from_user.id}.jpg')
            DataBase().update('photo', f'{message.from_user.id}.jpg', int(message.from_user.id))
            user2 = DataBase().getUser(message.from_user.id)
            photo = open(f'{message.from_user.id}.jpg', 'rb')
            await message.answer_photo(photo=photo,
                                       caption=f'{user2[1]}, {user2[3]}, {inst_[user2[4]]}\n{user2[15]} - {user2[5]} –∫—É—Ä—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user2[16]}\n{user2[6]}\n–ù–æ–º–µ—Ä–æ–∫: @{user2[10]}',
                                       reply_markup=keyboard_fan())
            await state.finish()
        else:
            await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')
    except:
        await message.answer(text='–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É')


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if DataBase().getUser(message.from_user.id)[13] == 0:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã')
    else:
        await message.answer('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=keyboard_admin())


@dp.message_handler(commands=['new_admin'])
async def new_admin(message: types.Message):
    if DataBase().getUser(message.from_user.id)[13] == 0:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    else:
        await message.answer('–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π\n/admin')


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def name(message: types.Message):
    if message.text == str(code_admin):
        admins = DataBase().check_admin()
        DataBase().update("admin", 1, message.from_user.id)
        await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {message.from_user.first_name}\n–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                             reply_markup=keyboard_admin())
        for i in range(len(admins)):
            if message.from_user.username is None:
                await bot.send_message(chat_id=admins[i],
                                       text=f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n@{message.from_user.first_name}")
            else:
                await bot.send_message(chat_id=admins[i],
                                       text=f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n@{message.from_user.username}")


@dp.callback_query_handler(lambda call: call.data == "params" or call.data == "texts" or call.data == "sender" or call.data == "users" or call.data == 'back_users')
async def ad_mins(call: types.CallbackQuery):
    if call.data == 'back_users':
        await call.message.edit_text('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=keyboard_admin())
    elif call.data == 'users':
        data = DataBase().get_stat_users()
        id_ = data["id"].split()
        username = data["username"].split()
        w = data["want"].split()
        message_ = ''
        der = {
            1: "–î—Ä—É–≥ üòù",
            2: "–ü–æ–¥—Ä—É–≥–∞ üíÖ",
            3: "–í—Å–µ",
            4: "–ü–∞—Ä–µ–Ω—å üèÑ‚Äç",
            5: "–î–µ–≤—É—à–∫–∞ üíÉ"
        }
        for i in range(len(id_)):
            message_ += f'{i + 1}. {username[i]} ({id_[i]}) - –ò—â–µ—Ç {der[int(w[i])]}\n'
        await call.message.edit_text(message_, reply_markup=keyboard_back_users())
    elif call.data == 'sender':
        await call.message.edit_reply_markup(reply_markup=keyboard_sender())


@dp.callback_query_handler(lambda call: call.data == "–ü–∞—Ä–Ω—è–º" or call.data == "–î–µ–≤—É—à–∫–∞–º" or call.data == "–í—Å–µ–º" or call.data == "back_sender")
async def sender(call: types.CallbackQuery):
    if call.data == '–ü–∞—Ä–Ω—è–º':
        await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
        await profile.man_send.set()
    elif call.data == '–î–µ–≤—É—à–∫–∞–º':
        await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
        await profile.gl_send.set()
    elif call.data == '–í—Å–µ–º':
        await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
        await profile.all_send.set()
    elif call.data == 'back_sender':
        await call.message.edit_reply_markup(reply_markup=keyboard_admin())


@dp.message_handler(state=profile.man_send, content_types=types.ContentTypes.TEXT)
async def send_man(message: types.Message, state: FSMContext):
    await state.update_data(man_send=message.text)
    data_ = await state.get_data()
    await state.finish()
    data = DataBase().sender()
    id_ = data['id_man'].split()
    count = 0
    for i in range(len(id_)):
        await bot.send_message(id_[i], text=f'{data_["man_send"]}')
        count += 1
    await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã... \n–í—Å–µ–≥–æ: {count}')


@dp.message_handler(state=profile.gl_send, content_types=types.ContentTypes.TEXT)
async def send_girl(message: types.Message, state: FSMContext):
    await state.update_data(gl_send=message.text)
    data_ = await state.get_data()
    await state.finish()
    data = DataBase().sender()
    id_ = data['id_gl'].split()
    count = 0
    for i in range(len(id_)):
        await bot.send_message(id_[i], text=f'{data_["gl_send"]}')
        count += 1
    await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã... \n–í—Å–µ–≥–æ: {count}')


@dp.message_handler(state=profile.all_send, content_types=types.ContentTypes.TEXT)
async def send_all(message: types.Message, state: FSMContext):
    await state.update_data(all_send=message.text)
    data_ = await state.get_data()
    await state.finish()
    data = DataBase().sender()
    id_ = data['all_id'].split()
    count = 0
    for i in range(len(id_)):
        await bot.send_message(id_[i], text=f'{data_["all_send"]}')
        count += 1
    await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã... \n–í—Å–µ–≥–æ: {count}')



executor.start_polling(dp, skip_updates=True)
